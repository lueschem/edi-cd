---

- name: Set facts for OS update (part I).
  ansible.builtin.set_fact:
    desired_os_image: "{{ os_image | community.general.json_query(os_image_query) | first  }}"
  vars:
    os_image_query: "[?device_type==`{{ device_type }}`].image_name"

- name: Set facts for OS update (part II).
  ansible.builtin.set_fact:
    needs_os_update: "{{ desired_os_image != reported_os_image }}"

- name: Announce OS update.
  ansible.builtin.debug:
    msg: "Updating OS image from {{ reported_os_image }} to {{ desired_os_image }}."
  when: needs_os_update

- name: Abort previous deployments.
  ansible.builtin.uri:
    url: "{{ mender_server }}/api/management/v1/deployments/devices/{{ inventory_hostname }}"
    method: DELETE
    headers:
      Accept: application/json
      Authorization: Bearer {{ mender_access_token }}
    status_code: 204
  delegate_to: 127.0.0.1
  when: needs_os_update and playbook_mode == "run"

- name: Apply OS update.
  ansible.builtin.uri:
    url: "{{ mender_server }}/api/management/v1/deployments/deployments"
    method: POST
    headers:
      Accept: application/json
      Authorization: Bearer {{ mender_access_token }}
    body_format: json
    body: "{{ lookup('template','os-update.json') }}"
    status_code: 201
  delegate_to: 127.0.0.1
  changed_when: true
  when: needs_os_update and playbook_mode == "run"
